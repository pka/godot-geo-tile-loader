name: Build

on:
  push:
    branches: [main]

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build ${{ matrix.target }}

    strategy:
      fail-fast: false
      matrix:
        target:
        - x86_64-unknown-linux-gnu
        - x86_64-pc-windows-msvc
        - x86_64-apple-darwin
        # - aarch64-apple-darwin
        include:
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-20.04
          target_rustflags: '--release'
          ext: so
        - target: x86_64-pc-windows-msvc
          os: windows-latest
          target_rustflags: '-j 1' # Workaround for "LLVM ERROR: out of memory"
          ext: dll
        - target: x86_64-apple-darwin
          os: macos-latest
          target_rustflags: '--release'
          ext: dylib
        # - target: aarch64-apple-darwin
        #   os: macos-latest
        #   target_rustflags: '--release'
        #   ext: dylib

    runs-on: ${{matrix.os}}

    defaults:
      run:
        working-directory: ./rust
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust toolchain and cache
      uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Build release binary
      run: |
        cargo build --locked --target ${{ matrix.target }} ${{ matrix.target_rustflags }}

    - name: Prepare archive
      run: |
        mkdir dist
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          mv target/${{ matrix.target }}/debug/*.${{ matrix.ext }} dist
        else
          mv target/${{ matrix.target }}/release/*.${{ matrix.ext }} dist
        fi

    - uses: actions/upload-artifact@v2
      with:
        name: release-builds
        path: rust/dist
